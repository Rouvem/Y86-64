#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Rouvem Pishchik 4514562
# Describe how and why you modified the baseline code.
# The code does k = 4 loop unrolling. In the code you will find a lot of returns.
# These are to stop the function at any point in time, just in case len becomes 0.
# The zero case is tested first and then the negative, then positive. The memory
# is used/loaded on a need basis.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jg Loop		# if so, goto Done:
	ret
Loop:	mrmovq (%rdi), %r10	# read val from src...
	iaddq $32, %rdi
        rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $32, %rsi		# dst++

	andq %r10, %r10		# val <= 0?
	jne Npos		# if so, goto Npos:
	iaddq $1, %rcx         # Count zeroes in rcx - count_zero++
	iaddq $-1, %rdx
	andq %rdx, %rdx
	jg Loop2
	ret

Npos:   jg Pos
        iaddq $1, %rbx        # Count negatives in rbx - count_neg++
	iaddq $-1, %rdx
	andq %rdx, %rdx
	jg Loop2
	ret

Pos:	iaddq $1, %rax		# Count positives in rax - count_pos++
	iaddq $-1, %rdx
	andq %rdx, %rdx
	jg Loop2
	ret

Loop2:	mrmovq -24(%rdi), %r11
	iaddq $-1, %rdx		# len--
	rmmovq %r11, -24(%rsi)
	andq %r11, %r11
	jne Npos2
	iaddq $1, %rcx
	andq %rdx, %rdx
	jg Loop3
	ret

Npos2:	jg Pos2
	iaddq $1, %rbx
	andq %rdx, %rdx
	jg Loop3
	ret

Pos2:	iaddq $1, %rax
	andq %rdx,%rdx		# len > 0?
	jg Loop3			# if so, goto Loop:
	ret

Loop3:	mrmovq -16(%rdi), %r12
	iaddq $-1, %rdx		# len--
	rmmovq %r12, -16(%rsi)
	andq %r12, %r12
	jne Npos3
	iaddq $1, %rcx
	andq %rdx, %rdx
	jg Loop4
	ret

Npos3:	jg Pos3
	iaddq $1, %rbx
	andq %rdx, %rdx
	jg Loop4
	ret

Pos3:	iaddq $1, %rax  
	andq %rdx,%rdx		# len > 0?
	jg Loop4			# if so, goto Loop:
	ret

Loop4:	mrmovq -8(%rdi), %r13
	iaddq $-1, %rdx		# len--
	rmmovq %r13, -8(%rsi)
	andq %r13, %r13
	jne Npos4
	iaddq $1, %rcx
	andq %rdx, %rdx
	jg Loop
	ret

Npos4:	jg Pos4
	iaddq $1, %rbx
	andq %rdx, %rdx
	jg Loop
	ret

Pos4:	iaddq $1, %rax
Rest:   andq %rdx,%rdx		# len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
